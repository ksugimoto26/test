import dash
import dash_core_components as dcc
import dash_html_components as html
from plotly import tools
import plotly.graph_objs as go
from dash.dependencies import Input, Output

import pandas as pd
from datetime import date,timedelta
from tia.bbg import LocalTerminal
import os

here=os.path.dirname(os.path.realpath(__file__))

category_list=['JAPANESE_INDUSTRY_GROUP_NAME','INDUSTRY_SECTOR','INDUSTRY_GROUP','INDUSTRY_SUBGROUP']

app = dash.Dash(__name__)
fig = tools.make_subplots()

#TOPIX500�\���������擾
tpx500=LocalTerminal.get_reference_data('TPX500 Index','indx_members').as_frame().iloc[0,0].iloc[:,0]+ ' Equity'

#TPX500�S�����̕��ނ��擾
categories=LocalTerminal.get_reference_data(tpx500.values,category_list).as_frame()
categories.to_csv(here + '\\categories.csv',encoding='shift_jis')

#����
date_from=(date.today()-timedelta(days=365)).strftime('%Y%m%d')
date_to=date.today().strftime('%Y%m%d')

#TPX500�S�����̓����g�[�^�����^�[�����擾
rtns=LocalTerminal.get_historical(tpx500.values,'DAY_TO_DAY_TOT_RETURN_GROSS_DVDS',date_from,date_to).as_frame()
rtns.columns=rtns.columns.get_level_values(0)
rtns.to_csv(here + '\\rtns.csv')

#TOPIX�z�����w�����擾
tpxt=LocalTerminal.get_historical('TPXDDVD Index','PX_LAST',date_from,date_to).as_frame()
tpxt.columns=tpxt.columns.get_level_values(0)
tpxt.to_csv(here + '\\tpxt.csv')

app.layout = html.Div([

    html.H1('�J�e�S���[�ʑ��Ύw��'),

    dcc.Dropdown(
        id='input',
        options=[{'label':category,'value':category} for category in category_list],
        value=category_list[0]
    ),

    dcc.Graph(
        id='output',
        figure=fig
    )
])

@app.callback(
    Output(component_id='output', component_property='figure'),
    [Input(component_id='input', component_property='value')]
)
def update_output_div(input_value):

    col_num=4

    try:
        categories=pd.read_csv(here + '\\categories.csv',encoding='shift_jis',index_col=0)
        tpxt=pd.read_csv(here + '\\tpxt.csv',index_col=0)
        rtns=pd.read_csv(here + '\\rtns.csv',index_col=0)
        
        result=[]
        cols=[]
        for g,tickers in categories.groupby(by=input_value).__iter__():
            print(g,tickers.index)
            idx=(1+rtns[tickers.index].mean(axis=1)/100).cumprod()
            result.append(idx)
            cols.append(g)

        tot_rtn_indices=pd.concat(result,axis=1)
        tot_rtn_indices.columns=cols
        relative_indices=100*(tot_rtn_indices).divide(tpxt.iloc[:,0],axis=0)*tpxt.iloc[0,0]

        row_num=(len(relative_indices.columns)-1)//col_num+1
        fig = tools.make_subplots(rows=row_num,
                                  cols=col_num,
                                  subplot_titles=relative_indices.columns
                                  )
        fig['layout'].update(height=(row_num)*250)

        for c in range(len(relative_indices.columns.values)):

            i=c//col_num+1
            j=c%col_num+1
            fig.append_trace(go.Scatter(
                                        x=relative_indices.index,
                                        y=relative_indices.iloc[:,c],
                                        name= relative_indices.columns[c]
                                        ),i,j)
    except:
        fig = tools.make_subplots()

    return fig

if __name__ == '__main__':
    app.run_server(debug=False)
